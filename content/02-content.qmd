---
title: "2. The Shell"
date: 2023-09-04
date-format: full
---

```{r slides, echo=FALSE, include=FALSE}
source(here::here("R", "slide-things.R"))

slide_details <- tibble::tribble(
  ~youtube_id,   ~title, ~slide, ~active,
  "", "", "1", TRUE)

```

## This week ...

A shell is how we talk to the operating system and see where we are in the file system. In a plain-text world we will spend quite a bit of time talking to the shell via a command-line interface. This week we see the elements of how to do that and what it buys us. We will also see how the shell implements its own version of the sort of thing we see all the time when using R, namely many single-purpose commands (more or less equivalent to functions) chained or pipelined together into sequences that can do quite complex tasks one piece at a time.

## Readings

- For more information about the shell, see @barrett22:_effic_linux


## Video

- Five minutes from Jenny Bryan on how to name things:

<iframe width="560" height="315" src="https://www.youtube.com/embed/ES1LTlnpLMk?si=hP_4NHRcqGe3KYUo" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>

## Examples

[This week's examples and demos](/example/02-example.qmd).


## Slides

```{=html}
<script type="application/javascript">

function resizeIFrameToFitContent( iFrame ) {

   iFrame.width  = document.getElementById("quarto-document-content").clientWidth;
   iFrame.height  = (document.getElementById("quarto-document-content").clientWidth * 0.5625)
}

window.addEventListener('DOMContentLoaded', function(e) {

    var iFrame = document.getElementById( 'quartoframe' );
    resizeIFrameToFitContent( iFrame );
    } );

</script>
<iframe class="slide-deck" id="quartoframe" src="../slides/02-slides.html"></iframe>
```

```{r show-slide-tabs, echo=FALSE, results="asis"}
slide_win_button("/slides/02-slides")
```
