---
title: "Helpers, Build Systems, Environments, Packages"
subtitle: "Modern Plain Text Social Science: Week 12"
format: kjhslides-revealjs
engine: knitr
filters:
  - invert-h1
  - line-highlight
  - include-code-files
author:
  - name: Kieran Healy
    affiliation: "Duke University"
date: last-modified
editor_options: 
  chunk_output_type: console
---


```{r}
#| label: "packages"
#| include: FALSE
library(flipbookr)
library(here)
library(tidyverse)
library(kjhslides)
```


```{r}
#| label: "setup"
#| include: FALSE

kjh_register_tenso()
kjh_set_knitr_opts()
kjh_set_slide_theme()

```


# [Helpers]{.fg-pink}, [Build Systems]{.fg-green}, [Environments]{.fg-yellow}, and [Packages]{.fg-lblue}  

## Load the packages, as always

```{r}
#| label: "07-iterating-on-data-2"
#| message: TRUE
library(here)      # manage file paths
library(socviz)    # data and some useful functions
library(tidyverse) # your friend and mine
```

---

# Helpers

## The RStudio Community

![](../assets/12-build/12_rstudio_community.png)

## The [reprex]{.fg-yellow} package

![](../assets/12-build/12_reprex.png)

## Best demonstrated live

When asking for help, make a [**reproducible example**]{.fg-green}

```{r }
#| label: 08-making-tidy-easier-3
library(reprex)
```



```{r }
#| label: 08-making-tidy-easier-4
library(tidyverse)

starwars |> 
  count(homeworld, species) |> 
  mutate(pct = n / sum(n) * 100) |> 
  arrange(desc(pct))
```

## The [usethis]{.fg-green} package

![](../assets/12-build/12_usethis.png)


# [Tables]{.fg-orange}, [tables]{.fg-yellow}, [tables]{.fg-green}

## tinytable

```{r}
#| output-location: column

mtcars |> 
  tinytable::tt()
```


## gt

From its website:

:::: {.smallcode}

```{r}
#| output-location: column

library(gt)

# Define the start and end dates for the data range
start_date <- "2010-06-07"
end_date <- "2010-06-14"

# Create a gt table based on preprocessed
# `sp500` table data
sp500 |>
  dplyr::filter(date >= start_date & date <= end_date) |>
  dplyr::select(-adj_close) |>
  gt() |>
  tab_header(
    title = "S&P 500",
    subtitle = glue::glue("{start_date} to {end_date}")
  ) |>
  fmt_currency() |>
  fmt_date(columns = date, date_style = "wd_m_day_year") |>
  fmt_number(columns = volume, suffixing = TRUE)
```

::::

## gtsummary

Built on top of `gt`, the **[gtsummary](http://www.danieldsjoberg.com/gtsummary/)** package.

```{r }
#| label: 08-making-tidy-easier-6
library(gtsummary)

trial
```

## gtsummary

Built on top of `gt`, the **[gtsummary](http://www.danieldsjoberg.com/gtsummary/)** package.

```{r}
#| label: 08-making-tidy-easier-7
#| eval: false
trial |> 
  tbl_summary(
    include = c(age, grade, response),
    by = trt, # split table by group
    missing = "no" # don't list missing data separately
  ) |>
  add_n() |> # add column with total number of non-missing observations
  add_p()
```

## gtsummary

```{r}
#| label: 08-making-tidy-easier-8
#| echo: false
trial |> 
  tbl_summary(
    include = c(age, grade, response),
    by = trt, # split table by group
    missing = "no" # don't list missing data separately
  ) |>
  add_n() |> # add column with total number of non-missing observations
  add_p() 
```



## gtsummary

[**`gtsummary()`**]{.fg-green} straight out of the box: 

```{r}
#| label: 08-making-tidy-easier-9
#| eval: false
gss_sm |> 
  select(race, degree, marital) |> 
  drop_na() |> 
  tbl_summary(
    by = race, # split table by group
    missing = "no" # don't list missing data separately
  ) |>
  bold_labels()
```

## gtsummary

```{r}
#| label: 08-making-tidy-easier-10
#| echo: false
gss_sm |> 
  select(race, degree, marital) |> 
  drop_na() |> 
  tbl_summary(
    by = race, # split table by group
    missing = "no" # don't list missing data separately
  ) |>
  bold_labels()
```

## gtsummary

With a bit more work ...

```{r}
#| label: 08-making-tidy-easier-11
#| eval: false
trial |>
  select(trt, age, marker) |>
  tbl_summary(
    by = trt,
    type = all_continuous() ~ "continuous2",
    statistic = all_continuous() ~ c("{N_nonmiss}",
                                     "{mean} ({sd})", 
                                     "{median} ({p25}, {p75})", 
                                     "{min}, {max}"),
    missing = "no") |>
  italicize_levels()
```


## gtsummary


```{r}
#| label: 08-making-tidy-easier-12
#| echo: false
trial |>
  select(trt, age, marker) |>
  tbl_summary(
    by = trt,
    type = all_continuous() ~ "continuous2",
    statistic = all_continuous() ~ c("{N_nonmiss}",
                                     "{mean} ({sd})", 
                                     "{median} ({p25}, {p75})", 
                                     "{min}, {max}"),
    missing = "no"
  ) |>
  italicize_levels()
```

## Summarize with [skimr]{.fg-green}

- We might want to make a [codebook]{.fg-orange} of our data

```{r }
#| label: 08-making-tidy-easier-29
library(skimr)
organdata <- read_csv(here("files", "examples", "organdonation.csv"))

```

## Summarize with [skimr]{.fg-green}

```{r }
#| label: 08-making-tidy-easier-30
organdata |> skim(where(is.numeric)) |> partition()
```

## Summarize with [skimr]{.fg-green}


```{r }
#| label: 08-making-tidy-easier-31
organdata |> skim(!where(is.numeric)) |> partition()
```

## Custom Summaries

```{r}
#| label: 08-making-tidy-easier-32

load(here("files", "examples", "stmf.rda"))

stmf
```

## Custom Summaries

```{r}
#| label: 08-making-tidy-easier-32a

stmf_country_years <- function(df = stmf) {

  df |>
    dplyr::select(cname, year) |>
    dplyr::group_by(cname, year) |>
    dplyr::tally() |>
    dplyr::mutate(n = as.character(n),
           n = dplyr::recode(n, "0" = "-", .default = "Y")) |>
    dplyr::group_by(year, cname) |>
    dplyr::arrange(year) |>
    tidyr::pivot_wider(names_from = year, values_from = n) |>
    dplyr::mutate(dplyr::across(where(is.character), \(x) dplyr::recode(x, .missing = "-"))) |>
    dplyr::arrange(cname)
}

```

## Custom Summaries

::: {.tiny}

```{r}
#| label: 08-making-tidy-easier-33
tinytable::tt(stmf_country_years()) |> tinytable::style_tt(align = "c")
```

:::

# How Projects Grow

## Like Topsy

![](../assets/12-build/12_covid_project_basic.png)

## Like Topsy

![](../assets/12-build/12_covid_project_git_renv.png)


## Like Topsy

![](../assets/12-build/12_covdata_package.png)

## Controlling this

- As projects grow, you will want to _refactor_ them
- Think in terms of modular code and invidivually isolatable steps
- These things tend to go in a predictable sequence

## For instance

- Some scripts, or a single notebook, becomes ...
- One script (or notebook) to rule them all, becomes ...
- A coordinating script to rule them all, becomes ...
- A function to rule them all, becomes ...
- A series of functions to rule them all, becomes ...
- A package to rule them all, becomes ... 
- A modular set of packages

# Remember, everything is a DAG

## Makefiles

Example: <https://github.com/kjhealy/make_example>

## Targets

Make for R: <https://docs.ropensci.org/targets/>

Comes with a very thorough manual: <https://books.ropensci.org/targets/>

## renv and Build Environments

<https://rstudio.github.io/renv/articles/renv.html>

![](../assets/12-build/12_renv.png)

You check-in the _lockfile_ to your project, but not the actual packages.

# R Packages

## For functionality, data, and papers

- Consider packaging your datasets! Benefits to documentation/codebooks etc
- One-table example: [uscenpops](https://kjhealy.github.io/uscenpops/)
- More extensive: [covdata](https://kjhealy.github.io/covdata/), [gssr](https://kjhealy.github.io/gssr/)
- How R packages work: [Wickham & Bryan](https://r-pkgs.org)

# Perspective

## Solve the problem you have

![](../assets/12-build/12_reproducible_son.png)
