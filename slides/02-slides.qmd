---
title: "The Idea of a Shell"
subtitle: "Modern Plain Text Social Science: Week 2"
format: kjhslides-revealjs
engine: knitr
filters: 
  - invert-h1
  - include-code-files
author:
  - name: Kieran Healy
    email: kieran.healy@duke.edu
date: last-modified
---

```{r}
#| label: setup
#| include: false

library(kjhslides)

kjh_register_tenso()
kjh_set_knitr_opts()
kjh_set_slide_theme()

library(flipbookr)
```

# Recap

## Technical Computing is frustrating

![](../assets/01-file-system/01_stock_sad_mac.png){width=100%}


## Where technical computing lives

:::: {.columns}

::: {.column width="35%"}

![](../assets/01-file-system/01_stock_mac_and_imac.png)

:::

::: {.column width="55%" .right}

- Windows and pointers.
- Multi-tasking, multiple windows.
- Exposes and leverages the file system.
- Many specialized tools in concert.
- Underneath, it's the 1970s, UNIX, and the command-line. 

:::

::::


## Different Answers

:::: {.columns}

::: {.column width="45%"}

### Office model

- Formatted documents are real.
- Intermediate outputs are cut and pasted into documents.
- Changes are tracked inside files.
- Final output is often in the same format you've been working in, e.g. a Word file, or a PDF.

:::

::: {.column width="45%" .right}

::::: {.fragment fragment-index=1}

### Engineering model {.right}

- Plain-text files are real.
- Intermediate outputs are produced via code, often inside documents.
- Changes are tracked outside files, at the level of a project.
- Final outputs are assembled programatically and converted to some desired format.

:::::

:::

::::

# The File System

## A tree-like hierarchy

:::: {.columns}

::: {.column width="60%"}

![](../assets/01-file-system/01_file_cabinet_hierarchy.png){width=90%}


:::

::: {.column width="35%"}

You may never have actually used one of these. 

:::

::::

::: aside

Illustration: @peek02:_unix_power_tools [p. 21]

:::


## File system hierarchy {.smaller}

![](../assets/01-file-system/01_file_system_example.png){width="70%"}

::: aside

Illustration: @peek02:_unix_power_tools [p. 23]

:::

## Standard locations 

- `/` : root. Everything lives inside or under the root.
- `/bin/`  : For _binaries_. Core user executable programs and tools.
- `/sbin/` : System binaries. Essential executables for the super user (who is also called `root`)
- `/lib/` : Support files for executables. 
- `/usr/` : Conventionally, stuff installed "locally" for users in addition to the core system. Will contain its own `bin/` and `lib/` subdirs.
- `/usr/local` : Files that the local user has compiled or installed
- `/opt/` : Like `/usr/`, another place for locally installed software to go.
- `/etc/` : Editable text configuration. System-wide config files often go here. 

## Standard locations 

-  `/home/` or `/Users/` : Where the files of individual system users live, like `/Users/kjhealy/`. This is the storage space associated with your user account

## Standard locations

- Your `$PATH` is an _environment variable_ that tells the system where executable files can be found. 

```{zsh}
echo $PATH
```

- Delimited by `:` and searched in order from left to right.

- To learn where a command is being executed from, use `which`

```{zsh}
which R
```


::: aside

If you find paths with `cryptex` in them, don't worry [they are part of macOS's security architecture](https://eclecticlight.co/2023/04/05/how-cryptexes-are-changing-macos-ventura/).

:::

# The Shell

## What is it?

- A shell is a way for you to tell the operating system to do things.
- On Unix systems it's the first user-facing thing to get off the ground during the startup/boot process.
- The command line is where you type instructions. Shells come with a collection of standard utilities that let you do things.
- These utilities can be chained or piped together for more complex tasks.
- You can also write scripts that will run tasks for you.
- Shell scripting languages are small programming languages that understand variables, command substitution, branching, and iteration.

## There are many shells

- Strictly speaking, GUI environments like Windows and the macOS Finder are shells too.
- But "the shell" usually means a text-based interpreter that runs programs in response to typed commands.
- The "original" Unix shell is `sh`.
- Its most widely-used descendant is `bash` or the Bourne-Again Shell.
- On macOS the default shell is the Z shell or `zsh`.
- Windows has the Command shell and PowerShell, and possibly also e.g. Cygwin.


## A command interpreter

- A shell is an _interpreter_. It waits for commands. When you supply them, it does what you tell it.

```{zsh}
echo "Hello there"
```


- The general name for this is a _REPL_ or Read-Eval-Print Loop. 
- Programming languages like Python and R work this way as well. They are _interpreted_, meaning code is sent to an interpreter (the Python or R program) that runs the code directly. 
- This is distinct from languages whose programs are (at least originally) designed to be _compiled_ into executable machine code before they are run. Languages like C, Go, and Rust are in this category.

# Getting around the file system

## Who and where

Who am I?

```{zsh}
whoami
```

Where am I?

```{zsh}
# Print working directory
pwd
```

## Listing files

What is in here?

```{zsh}
# List files
ls
```


## A Tree

```{zsh}
## The kind of thing you can do ... just use <tree -d -L 2> at the console though
find . -type d -maxdepth 2 -print 2>/dev/null | awk '!/\.$/ {for (i=1;i<NF-1;i++){printf("│   ")}print "├── "$NF}'  FS='/'
```

## Changing directories

```{zsh}
## Change directory and list files
cd files
ls  
cd ..
```


## More detail

```{zsh}
ls -l                                                                                           
```

Note the idea of commands having options, or _switches_. 

## More detail


```{zsh}
ls / 
```

The `~` character is a shortcut to the top of your home directory:

```{.zsh}
❯ cd ~
❯ ls
bin  certbot.log  logrotate.conf  old  projects  public  staging
```


##  Path rules

- If the path name begins with `/`, it is an _absolute_ path, starting from the root.
- If the path name begins with `~`, it will usually be expanded into an absolute path name starting at your home directory (`~`).

##  Path rules

- If the pathname does not begin with a `/` or `~` then the path name is relative to the current directory. 
- If the path name begins with `./`, the path is relative to the current directory, e.g., `./file.txt`, though this can also execute the file if it is given executable file permissions.
- If the path name begins with `../`, the path is relative to the parent of the current directory. For example, if your current directory is `/Users/kjhealy/Documents/papers` then `../data` means `/Users/kjhealy/Documents/data`
- These conventions extend to things like URLs and paths associated with e.g. SSH or FTP servers, and APIs.

# Some shell tools

## `wc`, `cat`, `head`, and `tail`

```{zsh}
# Rough words, lines, characters
wc files/examples/alice_in_wonderland.txt
```

We can ask for a count of lines only:

```{zsh}
wc -l files/examples/alice_in_wonderland.txt
```

## `wc`, `cat`, `head`, and `tail`

`cat` _concatenates_ and _prints_ the files given to it. 

```{zsh}
cat files/examples/jabberwocky.txt
```

## `wc`, `cat`, `head`, and `tail`

The top:

```{zsh}
head files/examples/alice_in_wonderland.txt 
```

The bottom:

```{zsh}
tail files/examples/alice_in_wonderland.txt 
```


## `wc`, `cat`, `head`, and `tail`

There are 29 lines of boilerplate at the start of the book:

```{zsh}
head -n 29 files/examples/alice_in_wonderland.txt
```

## `wc`, `cat`, `head`, and `tail`

And 351 at the end:

```{zsh}
tail -n 351 files/examples/alice_in_wonderland.txt | head -n 20
```

## `wc`, `cat`, `head`, and `tail`

We can use `tail` to skip the boilerplate at the top:

```{zsh}
tail -n +29 files/examples/alice_in_wonderland.txt | head
```


## `wc`, `cat`, `head`, and `tail`

We can use some shell variables along with `tail` twice to skip the boilerplate at the top and bottom, and put the result into a file of its own using `>` to redirect the output from `STDOUT`:

```{zsh}
# This sets HEADSKIP to 29 and ENDSKIP to 351; 
# We can refer to them with $HEADSKIP and $ENDSKIP
HEADSKIP=29
ENDSKIP=351

# The backticks ` ` here mean "Evaluate this command"; then put the result in a variable
BOOKLINES=`cat files/examples/alice_in_wonderland.txt| wc -l | tr ' ' '\n' | tail -1`

# This line does the arithmetic using expr and makes the result a variable
GOODLINES=$(expr $BOOKLINES - $HEADSKIP - $ENDSKIP)

# Now we use $HEADKSIP and $GOODLINES and create a new file 
tail -n +$HEADSKIP files/examples/alice_in_wonderland.txt | 
  head -n $GOODLINES > files/examples/alice_noboiler.txt
```


## `wc`, `cat`, `head`, and `tail`

Now our `wc` will be different:

```{zsh}
wc files/examples/alice_in_wonderland.txt 

wc files/examples/alice_noboiler.txt
```


## `uniq`, `sort`, and `cut`

A data file: 

```{zsh}
head files/examples/countries.csv
```

How many lines?

```{zsh}
wc -l files/examples/countries.csv 
```

How many unique lines?

```{zsh}
uniq files/examples/countries.csv | wc -l
```


## `uniq`, `sort`, and `cut`

```{zsh}
# Omit the header line 
tail -n +2 files/examples/countries.csv | sort -r | head
```


## `uniq`, `sort`, and `cut`

This doesn't _quite_ work because of the way the data is coded:

```{zsh}
tail -n +2 files/examples/countries.csv | sort -t , -k4 -k1
```


## `uniq`, `sort`, and `cut`

`cut` slices out columns or fields defined by a delimiter (by default `\t` or tab)


```{zsh}
cut -d , -f 2,4 files/examples/countries.csv 
```

Again in this case it doesn't quite behave as you might think! 

# Finding files and finding text

## `find` and `grep`

`find` is for locating files and directories by name:

```{zsh}
# Everything in the `files/` subdirectory
find files
```


## `find` and `grep`

We can use _globbing_ (or _wildcards_) to narrow our search:

```{zsh}
# Everything underneath the `files/` subdirectory 
# whose name ends in `.csl`
find files -name "*.csl"
```


## `find` and `grep`

Here we use the `.` to mean "Search in the current folder"

```{zsh}
# Searches everything underneath the working directory
find . -name "*.xlsx"
```


## `find` and `grep`

- The `-exec` option lets us do things with each result.
- The `{}` expands to each found file in turn.
- Here we use `echo` to see what the `rm` (remove) command would do. 
- The quoted semicolon `";"` or `\;` is required to end the line

```{zsh}
find files -name "*.png" -exec echo rm {} ";"
```

If we omitted the `echo` here the found files would be deleted one at a time.


## `find` and `grep`

We can also use `xargs` to act on search results:

```{zsh}
# Everything underneath the `files/` subdirectory 
# whose name ends in `.png`
find files -name "*.png"
```

Convert all these `png` files to `jpg`:

```{zsh}
# Everything underneath the `files/` subdirectory 
# whose name ends in `.png`
find files -name '*.png' -print0 | xargs -0 -r mogrify -format jpg
```

## `find` and `grep`

Check:

```{zsh}
find files -name '*.png' -o -name '*.jpg'
```

Delete them (with another method of deletion):

```{zsh}
find files  -name '*.jpg' -type f -delete
```


## `find` and `grep`

`find` searches file and folder names only. 
To search _inside_ files we use `grep`.

```{zsh}
grep Stately files/examples/ulysses.txt 
```

Search more than one file:

```{zsh}
## -i for case-insensitive search
grep -i jabber files/examples/*.txt
```

## `find` and `grep`

Grep and its derivatives are very powerful thanks to their ability to use _regular expressions_. We will be learning more about that next week. For now, we'll introduce `rg` or `ripgrep`, which is a modern version of `grep` that has some nice additional features. For more details see the [ripgrep project page](https://github.com/BurntSushi/ripgrep)

```{.zsh}
# On a Mac
brew install rg
```


# Getting around in the shell

## Your command history

Eventually you will accumulate a history of shell commands you have typed, many of which you may want to reuse from time to time. 

- Go to the previous command with the up arrow, `↑`
- _Search_ your command history with control-R, `^R`
- `^R` will also work for history search at the RStudio console and in many other places.


## Aside: Standard Modifier Key Symbols

| Symbol | Key         | Unicode    | Symbol | Key         | Unicode    |
|--------|-------------|------------|--------|-------------|------------|
| ⎋      | (escape)    | `U+238B` | ⌫      | (backspace) | `U+232B` |
| ⇥      | (tab)       | `U+21E5` | ⌦      | (delete)    | `U+2326` |
| ⇪      | (caps lock) | `U+21EA` | ⇱      | (home)      | `U+21F1` |
| ⇧      | (shift)     | `U+21E7` | ⇲      | (end)       | `U+21F2` |
| ⌃      | (control)   | `U+2303` | ⇞      | (page up)   | `U+21DE` |
| ⌥      | (option/alt)| `U+2325` | ⇟      | (page down) | `U+21DF` |
| ⌘      | (command)   | `U+2318` | ⌤      | (enter)     | `U+2324` |
| ⏎      | (return)    | `U+23CE` | ␣      | (space)     | `U+2423` |

## Integrate `rg` and `fzf`

`fzf` is a command-line fuzzy-finder. It makes `^R` really powerful and convenient. For details see the [fzf project page](https://github.com/junegunn/fzf).


```{.zsh}
# On a Mac
brew install fzf
```


![](../assets/02-shell/02_fzf_screenshot.png){width=100%}

# Naming things


## Naming files

The better your names for things, the easier they will be to find (and programmatically work with)


# Scripting the Shell

## Shell scripts

