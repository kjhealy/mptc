---
title: "Your Computer"
subtitle: "Modern Plain Text Social Science: Week 01a"
format: kjhslides-revealjs
engine: knitr
filters: 
  - invert-h1
  - include-code-files
author:
  - name: Kieran Healy
    email: kieran.healy@duke.edu
date: last-modified
---

```{r}
#| label: setup
#| include: false

library(kjhslides)

kjh_register_tenso()
kjh_set_knitr_opts()
kjh_set_slide_theme()

library(flipbookr)
```

# Motivation

## We depend on our computers

![](../assets/00-site/00-se-30-r.jpg){width=100%, fig-align="center"}

## Technical Computing is frustrating

![](../assets/01-file-system/01_stock_sad_mac.png){width=100%}


## Can we make it fun?

:::: {.columns}

::: {.column width="45%"}

![](../assets/01-file-system/01_stock_happy_people_computer_2.png){width=100%}

::: 

::: {.column width="45%" .right .incremental}

:::: {.fragment fragment-index=1}
### [No.]{.fg-red}
::::


:::: {.fragment fragment-index=2}
### &nbsp; ⇦ Not _this_ much fun, at any rate {.incremental}
::::

:::

:::: 


## OK but can we eliminate frustration? 

:::: {.columns}

::: {.column width="45%"}


![](../assets/01-file-system/01_stock_happy_woman_computer_2.png)

:::

::: {.column width="45%" .right}

:::: {.fragment fragment-index=1}
### [Also no.]{.fg-red}
::::

:::: {.fragment fragment-index=2}
### (Sorry.) 
::::

:::

::::


---

:::{.huge .center}
::::{.absolute top="25%"}
But we can make it [work]{.fg-lblue}
::::
:::


::: aside 
Also it's weirdly satisfying once you get into it. 
:::


# The Whole Game

## A tiny research project

- [Click here for a PDF of the tiny paper](/files/examples/01_mptc_oecd_nocode.pdf)


![](../assets/01-file-system/01_mptc_nocode_pdf_sshot.png)

## Features of our tiny paper

:::: {.columns}

::: {.column width="45%"}

![](../assets/01-file-system/01_mptc_nocode_pdf_sshot.png)

:::

::: {.column width="45%"}

- It's a file!
- Of a particular type (a PDF)
- You can't easily edit it
- It has a title, author, sections, a figure, tables, references, a footnote, and a bibliography. That is, it has many of the elements of a scholarly paper. 

:::

::::

## A different version 

- [Click here for a different version of our tiny paper](/files/examples/01_mptc_oecd_withcode.pdf)

![](../assets/01-file-system/01_mptc_withcode_pdf_sshot.png)

## Features of this version

:::: {.columns}

::: {.column width="45%"}

![](../assets/01-file-system/01_mptc_withcode_pdf_sshot.png)

:::

::: {.column width="45%"}

- It's also a file!
- Of a particular type (still a PDF)
- You still can't easily edit it
- It has all the stuff in the original version _plus_ a bunch of code that we can now see that was not shown before. 

:::

::::


## The project's GitHub page

![](../assets/01-file-system/01_mptc_oecd_github_page.png){fig-align="center"}

- Go here and download it:  <https://github.com/kjhealy/mptc_oecd>
- We're going to open it in RStudio and turn it into a document.
- Don't worry at this point if you're not sure what's happening, or what GitHub or RStudio are.


## Takeaways

- Our little scholarly article is a *file* in some *format*
- It's the result of some series of steps we use to *create* or *render* it from various pieces
- Some of these pieces include: _data_, _text_, _markup_, and _code_
- These pieces are stored in some sort of _orderly fashion_ somewhere 
- We have some sort of _engine_ that assembles the pieces into the end result
- We have some kind of _application_ to help us run that engine
- We can _reliably produce and reproduce_ the document in various formats

## That's a lot to start with

- We're going to back up and go through these pieces slowly
- Keep in mind why we're doing it (we want to reliably produce a scholarly paper)
- Also start thinking about why the tools we're using might look like this


# Two Revolutions in Computing


## What everyday computing is now

:::: {.columns}

::: {.column width="45%"}

![](../assets/01-file-system/01_stock_phone_and_tablet.png)

:::

::: {.column width="45%"}

- Touch\-based user interface
- Foregrounds a single application
- Dislikes multi-tasking\*
- Hides the file system


:::

::::


---

[[_Multitasking_]{.fg-orange}: I mean, “Making different specialized applications and resources work together in the service of a single but multi-dimensional project”, not “Checking social media while also listening to a talk and waiting for an update from the school nurse.”]{.larger .center .absolute top="30%"}


## Where technical computing lives

:::: {.columns}

::: {.column width="35%"}

![](../assets/01-file-system/01_stock_mac_and_imac.png)

:::

::: {.column width="55%"}

- Windows and pointers.
- Multi-tasking, multiple windows.
- Exposes and leverages the file system.
- Many specialized tools in concert.
- Underneath, it's the 1970s, UNIX, and the command-line. 

:::

::::


## Where technical computing lives

:::: {.columns}

::: {.column width="35%"}

![](../assets/01-file-system/01_stock_mac_and_imac.png)

:::

::: {.column width="55%"}

- This toolset is by now really good!
- Free! Open! Powerful!
- Friendly communities! Lots of information! Many resources!
- But: grounded in a UI paradigm that is increasingly far away from the everyday use of computing devices 
- So why do we use this stuff?
:::

::::

---

## {background-color="black" background-image="../assets/01-file-system/01_control.png"}

## Control, not Productivity

### Productivity is great and everything, but not why we do all this

### &nbsp;

### The most important thing is to be able to [_know and show what it was that you did_]{.fg-red} in the service of doing your work properly

## "Office" vs "Engineering" approaches

### What is "real" in your project?

### What is the final output?

### How is it produced?

### How are changes managed?


## Different Answers

:::: {.columns}

::: {.column width="45%"}

### Office model

- Formatted documents are real.
- Intermediate outputs are cut and pasted into documents.
- Changes are tracked inside files.
- Final output is often in the same format you've been working in, e.g. a Word file, or a PDF.

:::

::: {.column width="45%" .right}

::::: {.fragment fragment-index=1}

### Engineering model {.right}

- Plain-text files are real.
- Intermediate outputs are produced via code, often inside documents.
- Changes are tracked outside files, at the level of a project.
- Final outputs are assembled programatically and converted to some desired format.

:::::

:::

::::

## Different strengths and weaknesses

:::: {.columns}

::: {.column width="50%"}

### Office model

- Documents look like documents
- Everyone knows Word, Excel, or Google Docs
- "Track changes" is powerful and easy in a single document
- Hm, I can't remember how I made this figure
- Where did this table of results come from?
- `Paper_edits_FINAL_kh-1.docx`

:::

::: {.column width="50%" .right}

::::: {.fragment fragment-index=1}

### Engineering model

- Plain text is highly portable
- Push button, recreate analysis
- Project fully version-controlled
- Tables and figures produced and integrated programatically
- For the love of God, why can't I do this simple thing?
- `Object of type 'closure' is not subsettable`

:::::

:::

::::

---

:::{.huge .center}
::::{.absolute top="20%"}
Each approach generates solutions to its own problems
::::
:::



