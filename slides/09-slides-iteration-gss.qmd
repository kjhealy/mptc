---
title: "Iterating Safely"
subtitle: "Modern Plain Text Social Science<br />Week 09"
format: kjhslides-revealjs
engine: knitr
filters:
  - invert-h1
  - include-code-files
  - line-highlight
author:
  - name: Kieran Healy
    email: kieran.healy@duke.edu
date: last-modified
---


```{r}
#| label: setup
#| include: false

library(kjhslides)

kjh_register_tenso()
kjh_set_knitr_opts()
kjh_set_slide_theme()

library(flipbookr)
```


# [Safely]{.fg-green} iterating with [purrr]{.fg-yellow} and [map]{.fg-yellow}

## Load the packages, as always

```{r}
#| label: 07b-iterating-safely-2
#| message: true
library(here)      # manage file paths
library(socviz)    # data and some useful functions
library(tidyverse) # your friend and mine
```

## Additional libraries

```{r}
#| label: 07b-iterating-safely-3
library(survey)
library(srvyr)
library(broom)
library(gssr) # https://kjhealy.github.io/gssr
```

## The complete GSS

```{r}
#| label: 07b-iterating-safely-4
data(gss_all)

gss_all

```

## Set up our analysis

```{r}
#| label: 07b-iterating-safely-5
cont_vars <- c("year", "id", "ballot", "age")
cat_vars <- c("race", "sex", "fefam")
wt_vars <- c("vpsu",
             "vstrat",
             "oversamp",
             "formwt",              # weight to deal with experimental randomization
             "wtssall",             # main weight variable
             "sampcode",            # sampling error code
             "sample")              # sampling frame and method
my_vars <- c(cont_vars, cat_vars, wt_vars)

```

## Clean the labeled variables

```{r}
#| label: 07b-iterating-safely-6
gss_df <- gss_all |>
  filter(year > 1974 & year < 2021) |>
  select(all_of(my_vars)) |>
  mutate(across(everything(), haven::zap_missing), # Convert labeled missing to regular NA
         across(all_of(wt_vars), as.numeric),
         across(all_of(cat_vars), as_factor),
         across(all_of(cat_vars), fct_relabel, tolower),
         across(all_of(cat_vars), fct_relabel, tools::toTitleCase),
         compwt = oversamp * formwt * wtssall)

```

## Working dataset

```{r}
#| label: 07b-iterating-safely-7
gss_df
```

## The `fefam` question

```{r}
#| label: 07b-iterating-safely-8
gss_df |>
  count(fefam)
```

## Recoding

```{r}
#| label: 07b-iterating-safely-9
gss_df <- gss_df |>
  mutate(fefam_d = forcats::fct_recode(fefam,
                                  Agree = "Strongly Agree",
                                  Disagree = "Strongly Disagree"),
    fefam_n = recode(fefam_d, "Agree" = 1, "Disagree" = 0))

# factor version
gss_df |>
  count(fefam_d)

# numeric version, 1 is "Agree"
gss_df |>
  count(fefam_n)

```

## Unweighted model

```{r}
#| label: 07b-iterating-safely-10
out_all <- glm(fefam_n ~ age + sex + race,
              data = gss_df,
              family="binomial",
              na.action = na.omit)

summary(out_all)

```

## Tidied output

```{r}
#| label: 07b-iterating-safely-11
tidy(out_all)
```

## Iterating by year

```{r}
#| eval: false
#| echo: true
out_yr <- gss_df |>
  group_by(year) |>
  nest() |>
  mutate(
    model = map(data, \(x) glm(fefam_n ~ age + sex + race, data = x,
      family = "binomial", na.action = na.omit)),
    tidied = tidy(model, conf.int = TRUE)
  )
```

This will fail because `fefam` is not observed in every year.

## [**`nest()`**], [**`map()`**]{.fg-green} and [**`possibly()`**]{.fg-green}

```{r}
#| label: 07b-iterating-safely-12

out_yr <- gss_df |>
  group_by(year) |>
  nest(.key = "df") |>
  mutate(
    model = map(df, possibly(\(x, ...) tidy(glm(fefam_n ~ age + sex + race,
                                                data = x,
                                                family = "binomial",
                                                na.action = na.omit)),
                         otherwise = NULL)))

```

## [**`nest()`**], [**`map()`**]{.fg-green} and [**`possibly()`**]{.fg-green}

The underlying structure is this:

```{r}
#| label: 07b-iterating-safely-13
#| echo: true
#| eval: false

possibly(~ tidy(glm(...)), otherwise = NULL)
```

## [**`group_modify()`**]{.fg-green} and [**`possibly()`**]{.fg-green}

Using possibly with lambdas is confusing, though. It may be more intuitive to write this:

```{r}
safe_glm <- possibly(glm, otherwise = NULL)

tidy_safe_glm <- function(...) {
  tidy(safe_glm(...), conf.int = TRUE)
}
```

This makes it a bit clearer what `possibly()` does. The `...` pass the arguments through.

## [**`group_modify()`**]{.fg-green} and [**`possibly()`**]{.fg-green}

This way we avoid nesting and just get to the tidied model directly:

```{r}
out_yr <- gss_df |>
  group_by(year) |>
  group_modify(\(x, ...) tidy_safe_glm(
    fefam_n ~ age + sex + race, data = x,
    family = "binomial", na.action = na.omit))

out_yr
```


```{r}
#| label: 07b-iterating-safely-14
#| fig-width: 12
#| fig-height: 5
out_yr |>
  filter(term == "sexFemale") |>
  ggplot(mapping = aes(x = year, y = estimate,
                       ymin = conf.low, ymax = conf.high)) +
  geom_hline(yintercept = 0, linetype = "dotted") +
  geom_line() +
  geom_pointrange()
```




## Survey-weighted estimates

```{r}
#| label: 07b-iterating-safely-15
options(survey.lonely.psu = "adjust")
options(na.action="na.pass")

gss_svy <- gss_df |>
  filter(year > 1974) |>
  mutate(stratvar = interaction(year, vstrat)) |>
  as_survey_design(id = vpsu,
                     strata = stratvar,
                     weights = wtssall,
                     nest = TRUE)
gss_svy

```

---


## Survey-weighted estimates

```{r}
#| label: 07b-iterating-safely-16
gss_svy |>
  drop_na(fefam_d) |>
  group_by(year, sex, race, fefam_d) |>
  summarize(prop = survey_mean(na.rm = TRUE,
                               vartype = "ci"))

```

## Survey-weighted estimates

The entire dataset again.

```{r}
#| label: 07b-iterating-safely-17
out_svy_all <- svyglm(fefam_n ~ age + sex + race,
                  design = gss_svy,
                  family = quasibinomial(),
                  na.action = na.omit)

tidy(out_svy_all)
```

## A `possibly()` again

```{r}
safe_svy_glm <- possibly(svyglm, otherwise = NULL)

tidy_svy_glm <- function(...){
  tidy(safe_svy_glm(...))
}
```


## Survey-weighted estimates, by year

Unfortunately we can't use `group_map()` and `bind_rows()` here. We have to use `group_map_dfr()` and formula (`~`) notation in the `possibly()` call. Note the `.x` there, which is how the data frame gets passed in. (This used to be more common.) We also can't easily wrap the functions.

```{r}
#| label: 07b-iterating-safely-18
out_svy_yrs <- gss_svy |>
  group_by(year) |>
  group_map_dfr(
    possibly(~ tidy(
      svyglm(fefam_n ~ age + sex + race, design = .x,
                       family = quasibinomial(),
                       na.action = na.omit),
                       conf.int = TRUE),
      otherwise = NULL
      )
  )


out_svy_yrs
```

## Survey-weighted estimates, by year

```{r}
#| label: 07b-iterating-safely-19
#| fig-height: 5
#| fig-width: 12
out_svy_yrs |>
  filter(term == "sexFemale") |>
  ggplot(mapping = aes(x = year,
                       y = estimate,
                       ymin = conf.low,
                       ymax = conf.high)) +
  geom_hline(yintercept = 0, linetype = "dotted") +
  geom_line() +
  geom_pointrange()
```
