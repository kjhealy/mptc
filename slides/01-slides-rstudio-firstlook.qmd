---
title: "A First Look at RStudio"
subtitle: "Modern Plain Text Computing<br />Week 01"
format: kjhslides-revealjs
engine: knitr
filters:
  - invert-h1
  - include-code-files
  - line-highlight
author:
  - name: Kieran Healy
    email: kieran.healy@duke.edu
date: last-modified
editor_options:
  chunk_output_type: console
---

```{r}
#| label: "packages"
#| include: FALSE
library(flipbookr)
library(tidyverse)
library(here)
library(kjhslides)
```


```{r}
#| label: "setup"
#| include: FALSE

kjh_register_tenso()
kjh_set_knitr_opts()
kjh_set_slide_theme()








# Safe
```




# [Getting to know]{.fg-yellow} [R and RStudio]{.fg-lblue}


---

:::::{.absolute top="20%"}
:::{.huge}
 We want to [do our work]{.fg-orange} [reproducibly]{.fg-green}
:::
:::::

---

:::::{.absolute top="10%"}
:::: {.columns}
::: {.column width="50%"}
![](../assets/04-r/04_r_logo.png)
:::

::: {.column width="50%" .right}
![](../assets/04-r/04_rstudio_logo.png)
:::
::::
:::::

# The [RStudio]{.fg-lblue} IDE

## An Integrated Development Environment {background-image="../assets/04-r/04_ide_control_room.png" background-size="cover"}

## An IDE for Meals {background-image="../assets/04-r/04_ide_kitchen.png" background-size="cover"}

---

![RStudio at startup with an empty sample project](../assets/04-r/04_ide_rstudio_startup.png)

---

![RStudio schematic overview](../assets/04-r/04_ide_rstudio_schematic.png)

---

![RStudio schematic overview](../assets/04-r/04_ide_rstudio_schematic_overlay.png)

---


![RStudio at startup](../assets/04-r/04_ide_rstudio_startup.png)

---


![RStudio at startup](../assets/04-r/04_ide_rstudio_sshot_1.png)

---


![RStudio at startup](../assets/04-r/04_ide_rstudio_sshot_2.png)

---


![RStudio at startup](../assets/04-r/04_ide_rstudio_sshot_3.png)

---


![RStudio at startup](../assets/04-r/04_ide_rstudio_sshot_4.png)


## Your code is what's real in your project

:::: {.columns}
::: {.column width="50%"}

![](../assets/04-r/04_rstudio_dont_restore.png)
:::
::: {.column width="50%" .right}

**Tools > Global Options > General**

Uncheck "Restore .RData into workspace at startup"

:::

::::


## Consider not showing output inline

:::: {.columns}
::: {.column width="50%"}

![](../assets/04-r/04_rstudio_uncheck_inline.png)

:::
::: {.column width="50%" .right}

**Tools > Global Options > RMarkdown**

Uncheck "Show output inline for all R Markdown documents"
:::
::::


## Things an IDE brings together

- A *text editor* for writing code and documents
- A *console* or REPL (Read-Eval-Print Loop) for running code interactively
- A *terminal* to talk to the operating system
- A *debugger* to help find problems in your code
- A *file manager* to navigate your project
- A *version control interface* to manage changes to your code
- A *viewer* for plots, tables, and other outputs
- An *inspector* to see what's in your environment

## RStudio is just one IDE

- **Positron** (a newer IDE for R and Python)
- **VS Code** (a general-purpose IDE that supports many languages)
- **JupyterLab** (an IDE for Python notebooks)
- Text editors like **Vim**, **Emacs**, and **Sublime Text** can be configured to work like IDEs, too.

## An IDE is not required

- You can write R code in any text editor and run it from the command line.
- You can do the other things an IDE does with separate tools, via the command line or other applications.
- However, IDEs make your life easier.
- They also don't impose much structure on your projects. If you want to switch to another, or to no IDE at all, you can do so without much trouble.

## Fundamentally ...

- A core set of interdependent tasks that require doing things with the computer.
- A modular set of tools that do specific things, built around a text editor, a console, and plain-text configuration or code files.
- Some method of organizing and orchestrating these tools.

# Writing documents

---

:::::{.absolute top="10%"}
:::{.huge}
 Use Quarto to [produce]{.fg-orange} and [reproduce]{.fg-green} your work
:::
:::::

## Where we want to end up

## Where we want to end up

![PDF out](../assets/04-r/04_lorem_covid_quarto_pdf.png){fig-align="center" width=90%}

## Where we want to end up

![HTML out](../assets/04-r/04_lorem_covid_quarto_html.png){fig-align="center" width=45%}

## Where we want to end up

![Word out](../assets/04-r/04_lorem_covid_quarto_word.png){fig-align="center" width=100%}

## How to get there?

:::: {.columns}
::: {.column width="30%"}
  ![](../assets/04-r/04_covid_r_script.png)
:::

::: {.column width="70%" .right}
- We could write an **R script** with some notes inside, using it to create some figures and tables, paste them into our paper, which we write separately.
- This will work fine. In fact, the more complex our projects get, the more likely it is we will write more standalone code like this. It will also look less and less like a single all-in-one-breath script and more like a structured collection R files that combine to do many things.
- But to begin---and in fact for quite a long time after---we can also do things a little differently, by taking a more _notebook-based_ approach. For many use-cases this will be better.

:::
::::


## We can [make]{.fg-yellow} this ...

![](../assets/04-r/04_lorem_ipsum_goal.png){fig-align="center" width=100%}

## ... by [writing]{.fg-green} this

![](../assets/04-r/04_lorem_ipsum_raw.png){fig-align="center" width=100%}

## The [code]{.fg-pink} gets replaced by its [output]{.fg-green}

This way of doing things is called a _Literate Programming_ or _Notebook_ approach.

:::: {.columns}
::: {.column width="50%"}
![](../assets/04-r/04_lorem_ipsum_raw.png)
:::

::: {.column width="50%" .right}
![](../assets/04-r/04_lorem_ipsum_goal.png)
:::
::::





---

![Quarto document](../assets/04-r/04_lorem_covid_quarto_qmd.png){fig-align="center" width=90%}

---

![Quarto document annotated](../assets/04-r/04_lorem_covid_quarto_qmd_annotated.png){fig-align="center" width=90%}

---

![](../assets/04-r/04_lorem_covid_quarto_triple.png){fig-align="center" width=140%}

- This approach has its limitations, but it's _very_ useful and has many benefits.

---

## Strengths and weaknesses

:::: {.columns}

::: {.column width="50%"}

### Notebooks work smoothly when

- Your document or report is small and self-contained.
- Your analysis is quick or lightweight.
- You are making slides.
- You are making a lot of similar reports from a template.
- You regularly refer to calculated items in the text of your analysis.

:::

::: {.column width="50%" .right}

::::: {.fragment fragment-index=1}

### Notebooks can get awkward when

- Your analysis has many pieces.
- Your project has many authors.
- Your analysis needs a lot of cleaning, scaffolding, and other prep-work before you can produce the tables and figures in your output document.
- You have a lot of different outputs.

:::::

:::

::::


## Sidenote: In Practice

Even when things get complicated, notebook-style documents like Quarto files are great as component parts of larger projects. The more complex your project, the less likely it will straightforwardly fit into a _single_ notebook. The same is true of script-based approaches. The more complex a project, the more you will break it up into smaller, more tractable pieces. You will _re-factor_ it, as programmers say, and make it more _modular_.

You may find yourself, for example, splitting parts of a complex document up into different pieces. The pieces will contain code that cleans and pre-processes data, runs analyses, and produces some outputs. You can then  incorporate those into a Quarto document indirectly. Not by copying and pasting them, but by pointing to those outputs and making use of them to make your tables and figures, and so on.


---

## Basic markdown summary

:::{.custom-small-table}

| Desired style  | Use the following Markdown annotation |
| -------------- | ------------------------------------- |
| **Heading 1**  | `# Heading 1`                                    |
| **Heading 2**  | `## Heading 2`                                   |
| Heading 3      | `### Heading 3` (Actual heading styles will vary.) |
| Paragraph      | Just start typing                            |
| **Bold**       | `**Bold**`                                   |
| *Italic*       | `*Italic*`                                   |
| Images         | `[Alternate text for image](path/image.jpg)` |
| [Hyperlinks](https://www.visualizingsociety.com) | `[Link text](https://www.visualizingsociety.com/)` |
| Unordered Lists      |   |
| - First    | `- First` |
| - Second.  |  `- Second` |
| - Third    |`- Third`   |
| Ordered Lists      |   |
| 1. First    | `1. First` |
| 2. Second.  |  `2. Second` |
| 3. Third    |`3. Third`   |
| Footnote.¹ |  `Footnote[^notelabel]`  |
|  ¹The note's content. | `[^notelabel] The note's content.`  |

:::


## The right frame of mind

- This is like learning how to drive a car, or how to cook in a kitchen ... or learning to speak a language.
- After some orientation to what's where, you will learn best by _doing_.
- Software is a pain, but you won't crash the car or burn your house down.

## Create a new Quarto Project

- File > New Project > New Directory > Quarto Project
- Choose a location for a folder named `mptc`
- Initialize a git repository
- Check the "Open in new session" box
- Click "Create Project"

## Create a new Quarto Document

- Once the project opens, create a new file (File > New File > Quarto Document)
- Choose "Document" and "HTML" as the output format
- Save the file as `scratch.qmd` in the `mptc` folder

## For now

- Get used to editing text files in RStudio and rendering them to HTML or PDF.
- Don't worry about writing any code at this point. Treat it as a way to take notes for the class.
- In the same way that you should be reading around and beyond the assigned readings for other classes, you should also be exploring R and RStudio on your own. Try to do things; see what happens.
