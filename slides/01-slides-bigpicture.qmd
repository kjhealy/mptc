---
title: "Doing Your Work Properly"
subtitle: "Modern Plain Text Computing<br />Week 01"
format: kjhslides-revealjs
engine: knitr
filters:
  - invert-h1
  - include-code-files
  - line-highlight
author:
  - name: Kieran Healy
    email: kieran.healy@duke.edu
date: last-modified
---

```{r}
#| label: setup
#| include: false

library(kjhslides)

kjh_register_tenso()
kjh_set_knitr_opts()
kjh_set_slide_theme()

library(flipbookr)
```

# Motivation

## We depend on our computers

![](../assets/00-site/00-se-30-r.jpg){width=100%, fig-align="center"}

## Technical computing is frustrating

![](../assets/01-file-system/01_stock_sad_mac.png){width=100%}


## Can we make it fun?

:::: {.columns}

::: {.column width="45%"}

![](../assets/01-file-system/01_stock_happy_people_computer_2.png){width=100%}

:::

::: {.column width="45%" .right .incremental}

:::: {.fragment fragment-index=1}
### [No.]{.fg-red}
::::


:::: {.fragment fragment-index=2}
### &nbsp; ⇦ Not _this_ much fun, at any rate {.incremental}
::::

:::

::::


## OK but can we eliminate frustration?

:::: {.columns}

::: {.column width="45%"}


![](../assets/01-file-system/01_stock_happy_woman_computer_2.png)

:::

::: {.column width="45%" .right}

:::: {.fragment fragment-index=1}
### [Also no.]{.fg-red}
::::

:::: {.fragment fragment-index=2}
### (Sorry.)
::::

:::

::::


---

:::{.huge .center}
::::{.absolute top="25%"}
But we can make it [work]{.fg-lblue}
::::
:::


::: aside
Also it's weirdly satisfying once you get into it.
:::

# Bigger picture

## Science is hard

:::: {.columns}
::: {.column width="40%"}
  ![](../assets/01-file-system/01_reproducible_cover.png){width="100%"}

:::

::: {.column width="60%"}

- Scientific research is difficult.
- It depends on norms that entail a lot of trust.
- Doing it badly or fraudulently is too easy.
- We have tools to help us do the right thing.
- (But our tools can't _make_ us do the right thing.)

:::
::::

## This course

### What it's not

::::: {.fragment fragment-index=1}
- This is not a statistics or quantitative methods course.
- Neither is it a course in the logic of social-science research.
- Other courses in the program teach you that stuff.
:::::

### What it is

::::: {.fragment fragment-index=2}
- Our goal is more humble but also [smooths the path]{.fg-green} for the other stuff.
- You'll learn a way of thinking and a set of technical tools for managing your own research, whatever that research is.
- This toolkit is [powerful]{.fg-red}, [extensible]{.fg-orange}, [versatile]{.fg-pink},  and _extremely_ [widespread]{.fg-lblue}, far beyond the world of social-scientific research.
:::::


# The Whole Game

## A tiny research project

:::: {.columns}
::: {.column width="45%"}
![](../assets/01-file-system/01_mptc_nocode_pdf_sshot.png){width="100%"}
:::

::: {.column width="45%"}
[Click here for a PDF of the tiny paper](/files/examples/01_mptc_oecd_nocode.pdf)
:::
::::


## Features of our tiny paper

:::: {.columns}

::: {.column width="45%"}

![](../assets/01-file-system/01_mptc_nocode_pdf_sshot.png)

:::

::: {.column width="45%"}

- It's a file!
- Of a particular type (a PDF)
- You can't easily edit it
- It has a title, author, sections, a figure, tables, references, a footnote, and a bibliography. That is, it has many of the elements of a scholarly paper.

:::

::::


## A slightly different version

:::: {.columns}
::: {.column width="45%"}
![](../assets/01-file-system/01_mptc_withcode_pdf_sshot.png){width="100%"}
:::

::: {.column width="45%"}
[Click here for a PDF of this version of the tiny paper](/files/examples/01_mptc_oecd_withcode.pdf)
:::
::::


## Features of this version

:::: {.columns}

::: {.column width="45%"}

![](../assets/01-file-system/01_mptc_withcode_pdf_sshot.png)

:::

::: {.column width="45%"}

- It's also a file!
- Of a particular type (still a PDF)
- You still can't easily edit it
- It has all the stuff in the original version _plus_ a bunch of code that we can now see that was not shown before.

:::

::::


## Have you done this part yet?

[Week 01 Assignment: Install R and RStudio](/assignment/01-assignment-install-r-github.qmd)

![](../assets/01-file-system/01_mptc_assignment_01.png)

## The project's GitHub page

![](../assets/01-file-system/01_mptc_oecd_github_page.png){fig-align="center"}

- Go here and download it:  <https://github.com/kjhealy/mptc_oecd>
- We're going to open it in RStudio, take a look at the various parts of the project, and turn it into a document.
- Don't worry at this point if you're not sure what's happening, or what GitHub or RStudio are.

## (Sound of Engine Trying to Start)

This slide is up because we are installing the required software by following the instructions handed out earlier. In other words, we are discovering the inevitable idiosyncrasies of everyone's individual setup, the vagaries of various operating systems, the intrinsic difficulty of following documented steps in a procedure, the hidden bits of implicit knowledge or not-fully-articulated steps that are nevertheless necessary, the high prevalence of ordinary error and failure in everyday life, and the awful grip of chance on human affairs in general.

## Main Ideas

::: {.incremental}
- Our little scholarly article is a [file]{.fg-lblue} in some [format]{.fg-lblue}.
- We created or [rendered]{.fg-lblue} it from several other pieces when we pushed that [&#8680;Render]{.fg-red} button.
- Some of these pieces include: [data]{.fg-lblue}, [text]{.fg-lblue}, [markup]{.fg-lblue}, and [code]{.fg-lblue}.
- Most of these pieces are in [plain text]{.fg-lblue}, in files of their own.
- They are stored in some sort of [orderly fashion]{.fg-lblue} somewhere.
- We have some sort of [engine]{.fg-lblue} that assembled the pieces into the article.
- We have some kind of [application]{.fg-lblue} to help us run the engine and manage the pieces.
- We can [reliably produce and reproduce]{.fg-lblue} the document in various formats.
:::

## That's a lot all at once

- We're going to back up and go through these pieces slowly.
- Keep in mind why we're doing it (we want to reliably produce a scholarly paper).
- Also start thinking about why the tools we're using might look like this.


# Two Revolutions in Computing


## What everyday computing is now

:::: {.columns}

::: {.column width="45%"}

![](../assets/01-file-system/01_stock_phone_and_tablet.png)

:::

::: {.column width="45%"}

- Touch\-based user interface.
- Foregrounds a single application.
- Dislikes multi-tasking.\*
- Hides the file system.
- Very far underneath, it's often the 1970s, UNIX, and the command-line. But usually you don't get to see this.


:::

::::


---

[[_Multi-tasking_]{.fg-orange}: I mean, “Making different specialized applications and resources work together in the service of a single but multi-dimensional project”, not “Checking social media while also listening to a talk and waiting for an update from the school nurse.”]{.larger .center .absolute top="30%"}


## Where technical computing lives

:::: {.columns}

::: {.column width="35%"}

![](../assets/01-file-system/01_stock_mac_and_imac.png)

:::

::: {.column width="55%"}

- Most interaction via windows, icons, pointers, clicking.
- Multi-tasking via multiple windows at once is standard.
- Exposes and leverages the file system.
- Using several specialized applications in concert is common.
- Underneath, it's often the 1970s, UNIX, and the command-line. And you _can_ get to see this.

:::

::::


## Where technical computing lives

:::: {.columns}

::: {.column width="35%"}

![](../assets/01-file-system/01_stock_mac_and_imac.png)

:::

::: {.column width="55%"}

- For technical computing in the sense of doing "statistics" this toolset is by now really good.
- It's also very good for technical computing in the sense that all scholarly work is technical.
- But these tools are grounded in a paradigm that is increasingly far away from the everyday use of our most common computing devices.
- So why do we continue to use and develop them?
:::

::::

---

## {background-color="black" background-image="../assets/01-file-system/01_control.png"}

## Control, not Productivity

### Productivity is great and everything, but not why we do all this.

### &nbsp;

### The most important thing is to be able to [_confidently know and clearly show what it was that you did_]{.fg-red} in the service of doing your work properly.

## "Office" vs "Engineering" approaches

The challenge of "Knowing and Showing" gives rise to questions like these:

### [What is "real" in your project?]{.fg-lblue}

### [What is the final output?]{.fg-orange}

### [How is it produced?]{.fg-pink}

### [How are changes managed?]{.fg-blue}

### [Can you do it again?]{.fg-yellow}

## Different Answers

:::: {.columns}

::: {.column width="45%"}

### Office model

- Formatted documents are real.
- Intermediate outputs are cut and pasted into documents.
- Changes are tracked inside files.
- Final output is often in the same format you've been working in, e.g. a Word file, or a PDF.

:::

::: {.column width="45%" .right}

::::: {.fragment fragment-index=1}

### Engineering model {.right}

- Plain-text files are real.
- Intermediate outputs are produced via code, often inside documents.
- Changes are tracked outside files, at the level of a project.
- Final outputs are assembled programatically and converted to some desired format.

:::::

:::

::::

## Different strengths and weaknesses

:::: {.columns}

::: {.column width="50%"}

### Office model

- Documents look like documents.
- Everyone knows Word, Excel, or Google Docs.
- "Track changes" is powerful and easy in a single document.
- Hm, I can't remember how I made this figure.
- Where did this table of results come from?
- `Paper_edits_FINAL_kh-1.docx`

:::

::: {.column width="50%" .right}

::::: {.fragment fragment-index=1}

### Engineering model

- Plain text is highly portable.
- Push button, recreate analysis.
- Project fully version-controlled.
- Tables and figures produced and integrated programatically.
- For the love of God, why can't I do this simple thing?
- `Object of type 'closure' is not subsettable`

:::::

:::

::::

---

:::{.huge .center}
::::{.absolute top="20%"}
[Each approach generates solutions to its own problems]{.fg-red}
::::
:::
