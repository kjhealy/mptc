---
title: "Sociol 703: Modern Plain Text Computing"
author:
  - name: Kieran Healy
    email: kieran.healy@duke.edu
    affiliations:
      - id: duke
        name: Duke University
format:
  html: default
  minion-pdf: default
editor:
  markdown:
    wrap: 72
---

```{r setup, message=FALSE, warning=FALSE, include=FALSE}
library(dplyr)
library(tibble)
library(pander)
```

# About this course

This course is an introduction to modern plain-text methods of data
analysis, data management, and coding. It is required for first-year
graduate students in the Sociology department. It introduces a suite or
"stack" of computing tools and techniques that are widely used in the
department, the discipline, across the social sciences, and beyond. We
will learn to use these tools and also learn why they exist and why they
are important for producing work that is reliable, reproducible, and
open to inspection.

# Motivation

Researchers depend on computer software to get their work done. But
often, they do not know enough about how their computers work. This
makes their lives more difficult. I don't mean it's a shame not everyone
is a software engineer ready and able to write applications from the
ground up. Rather, as researchers working with data of various kinds, we
just don't make the best use of our computers. Nor are we encouraged to
reflect on why they work the way they do. Instead we end up fending for
ourselves and picking things up informally. Or, instead of getting on
with the task at hand, course instructors are forced to spend time
bringing people up to speed about where that document went, or what a
file is, or why the stupid thing stopped working just now. In the worst
case, we never get a feel for this stuff at all and end up marinating in
an admixture of magical thinking and sour resentment towards the
machines we sit in front of for hours each day.

All of that is bad. This course is meant to help. While the coding and
data analysis tools we have are powerful, they are also kind of a pain
in the neck. For the most part they are made to allow us to know what we
did. They can be opened up to have their history and inner workings
examined if needed. This runs against the grain of the devices we use
most often---our phones---which do not work in that way at all. As a
rule, apps on your phone hide their implementation details from you and
do not want you to worry too much about where things are stored or how
things are accomplished or what happens if you need to do the same thing
again later. They do that for very good reasons. But it does mean that
even if you use a powerful computer constantly, as we almost all do now,
it does not give you much of a grip on how more technical computing
works. To the contrary, it makes it look strange and annoying and
deliberately confusing.

The fragmented, messy, and multifacted tasks associated with scholarly
research make heavy demands on software. Most of them have to do with
the need for *control* over what you are doing, and especially the
importance of having a *record* of what you did that you can revisit and
*reproduce* if needed. They also need to allow us to track down and
diagnose errors. Because our research work is fragmented and messy, this
can often be a tricky process to think clearly about and work through in
a systematic way.

To help address these challenges, modern computing platforms provide us
with a suite of powerful, modular, specialized tools and methods. The
bad news is that they are not magic; they cannot do our thinking for us.
The good news is that they are by now very old and very stable. Most of
them are developed in the open. Many are supported by helpful
communities. Almost all are available for free. Nearly without
exception, they tend to work through the medium of explicit instructions
written out in plain text. In other words they work by having you write
some code, in the broadest sense. People who do research involving
structured data of any kind should become familiar with these tools.
Lack of familiarly with the basics encourages bad habits and unhealthy
attitudes among the informed and uninformed alike, ranging from
misplaced impatience to creeping despair.

# Reading

Required reading from books and articles will be provided on [the course
website](https://mptc.io) Canvas or (in most cases) will be freely
available online. Useful texts to acquire in hardcopy or to bookmark
include:

-   [@wickham23:_r_data_scien]
-   [@janssens21:_data_science_command_line]
-   [@ismaykim19:modern]
-   [@chacon14:_pro_git]
-   [@healy:2019]
-   [@friedl06:_master_regul_expres]
-   [@landau22:_r]
-   [@wickhambryan:2023]
-   [@christensen19:_trans_reprod_social_scien_resear]

# Software

We will do all most of our work class using Unix-style command line
tools, [R](https://cran.r-project.org/), and
[RStudio](https://www.rstudio.com/). [R](https://cran.r-project.org/) is
a freely-available programming language that is designed for statistical
computing and widely used across the natural and social sciences, as
well as in the world of "data science" generally.
[RStudio](https://www.rstudio.com/) is an integrated development
environment, or IDE, for R, a kind of control center from which you can
manage the engine-room of R itself. It is also freely available.

# Course website

The course website is at <https://mptc.io>. Each week, slides, readings,
and other class material will be posted there along with additional
examples and the problem set due the following week.

# Weekly Schedule

- The schedule is subject to change.

```{r,echo=FALSE}
readxl::read_xlsx(here::here("data", "schedule.xlsx")) |>
  dplyr::mutate(date = lubridate::ymd(date),
                day2 = lubridate::ymd(day2),
                date = glue::glue('{format(date, "%b %e")} / {format(day2, "%b %e")}'),
                date = stringr::str_replace_all(date, "NA", "-")) |>
  dplyr::select(subgroup, title) |>
  dplyr::rename(Week = subgroup, Topic = title) |>
  kableExtra::kbl(booktabs = TRUE)
```

# Expectations

This is a graduate seminar. I take it for granted that you have a basic interest in the material, an enthusiastic attitude toward participation, and a respectful attitude to everyone in the room. I expect you to attend each meeting, do the required reading and assignments thoroughly and on time, and participate actively. Participating actively means contributing to class discussion and problem-solving, something that involves both speaking and listening. Do not silently wander off during class, as if the person speaking in front of you was a video playing. Each class meeting will have a short break in the middle.

The main purpose of the first year graduate sequence is to teach you some core things about the field that are either required for you to do good work, or extremely useful toward that end, but which you do not already know. This has some implications that might not be immediately obvious. First, I am not making you read or do things in order to waste your time or haze you in some weird fashion. Second, your role in the class is to try to learn things you don't already know and not, for example, to try to impress me, your peers, or yourself with how clever you are. Third, this point also applies to my role as the instructor. Fourth, the people in the room---including me---are not your competitors or enemies; they are your interlocutors. Academic disciplines are just highly-structured, long-running conversations involving specialized show-and-tell and question-and-answer formats. This is where you start learning what the conversation topics are, what you need to know in order to make something useful, and how to begin making your own contributions. So please, trust the process. Everything will go better if you do.

# Required work and assessment

Weekly **Class Participation** (30% of final grade) and **Problem Sets**
(50% of final grade) will let you reflect on the reading and practice
your skills. Problem sets are due by end of day the *Friday after* they
are assigned. A **Final Project** (20% of final grade) will allow you to
put what you've learned to use.

# Course policies

-   Attendance is required, and important. I am a reasonable person; if
    you need to be absent please *let me know in advance* insofar as
    that is possible.
-   Do the assigned readings in advance of class.
-   Submit problem sets, or other assignments, on time.
-   Do not use AI tools to complete assignments unless I explicitly say that you may do so. We'll discuss them, their uses, and their limitations by the end of the course. But if you use them before then for an assigment, you will get an F for the course. I am not joking. The point of this seminar---the whole reason it is required---is for you to learn how to do things for yourself, and to understand what it is you are doing. When it comes to writing scripts or navigating documentation or debugging bits of code, AI can be very handy at times. But first you have to know what you are doing.


# Duke community standard

Like all classes at the university, this course is conducted under the
Duke Community Standard. Duke University is a community dedicated to
scholarship, leadership, and service and to the principles of honesty,
fairness, respect, and accountability. Citizens of this community commit
to reflect upon and uphold these principles in all academic and
nonacademic endeavors, and to protect and promote a culture of
integrity. To uphold the Duke Community Standard you will not lie,
cheat, or steal in academic endeavors; you will conduct yourself
honorably in all your endeavors; and you will act if the Standard is
compromised.
