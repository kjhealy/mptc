---
title: "Modern Plain Text Computing"
---

```{r set-dependencies, include=FALSE}
# Site-wide targets dependencies
# withr::with_dir(here::here(), {
#   targets::tar_load(project_zips)
#   targets::tar_load(xaringan_slides)
#   targets::tar_load(xaringan_pdfs)
# })
```

This is the course website for the Fall 2023 mini-seminar SOCIOL 880-1, Modern Plain Text Computing, taught at [Duke University](https://duke.edu) by [Kieran Healy](https://kieranhealy.org/).

## Motivation

Researchers depend on computers and software applications to get their work done but often do not know how to effectively use them. I don't mean it's a shame not everyone is a computer scientist or an electrical engineer ready and able to write or make computational tools from the ground up. Rather, as researchers working with data and records (both of a "quantitative" and "qualitative" nature) we are rarely taught how to use these tools. Nor are we encouraged to reflect on why they work the way they do. Even worse, the computers we use most often---our phones---do not work in a way that helps us understand the hardware and software we use for research. Instead, we are left to fend for ourselves and pick things up informally. Instructors in courses that should be focused on some substantive topic have to spend time bringing people up to speed on where your document went, or what a file is. In the worst case, we never get a feel for these tools at all and instead end up adopting an attitude of sullen resentment towards devices we will be sitting in front of for hours each day for the rest of our professional lives.

![A working scale replica of a Digital Equipment Corporation PDP-11/70, one of the mainstays of computing in the 1970s. As annoying as your laptop undoubtedly is, be grateful that you do not have to program this machine using the bank of switches at the front, or interpret its output by reading the [blinkenlights](https://en.wikipedia.org/wiki/Blinkenlights).](assets/pdp11-800.gif "A working scale model of a DEC PDP 11/70."){#fig-pdp11}


All of that is bad. This course is meant to help. The coding and data analysis tools we have are immensely powerful, and also kind of a pain in the ass. For the most part they are made to allow research products to be opened up and have their history and inner workings examined if needed. But the way they work runs against the grain of everyday software, such as the apps you use on your phone. As a rule those applications---for very good reasons---hides their implementation details from you and do not want you to worry too much about where things are stored or how things are accomplished or what happens if you need to do the same thing again later. 

The more complex, messy, and technical tasks associated with scholarly research makes different demands. Most of them have to do with the need for *control* over what you are doing. Broadly speaking, we have a shed full of powerful, modular, very useful tools and methods, some of which are very old and very stable, most of which are developed in the open, many of which are supported by helpful communities, and almost all of which are available for free. Above all, they tend to work through the medium of explicit instructions written out in plain text. In other words they work by writing code, in the broad sense. People who just want to do research tend not to be familiar with these tools. This is only to be expected. But the absence of any sort of systematic introduction to them creates problems. It encourages bad habits and unhealthy attitudes amongst the informed and uninformed alike, ranging from magical thinking to misplaced impatience to creeping despair.

![A Macintosh SE/30, made in 1989, running one of the first-available versions of R, written in 1995.](assets/se-30-r.jpg "A Macintosh SE/30, made in 1989, running one of the first-available versions of R, written in 1995."){#fig-pdp11}

## Goals

Over the six weeks of this mini-seminar we will learn some elements of plain-text computing that every graduate student in the social sciences (and beyond!) should know something about. These include: 

- The file system and the Unix way of thinking
- Text editing and text editors
- The command line environment 
- Version control
- Build systems and development environments

Throughout the course we will move back and forth between two levels. First, and most concretely, we will learn about *specific tools* and various tricks associated with using them. At this level we will focus on examples that come up in our everyday work. Second, and more generally, we will try to develop a *way of thinking* about these tools. That is, we will try to understand why they work the way they do. After all, we don't need to learn all these tools right away. There are far too many of them to even try, in any case. Rather, at this level we will try to develop the ability---and fortitude---to learn how to learn more, together with strategies to solve problems as they (inevitably) arise, even when those problems are (undeniably) frustrating.

## Schedule

Consult the [course schedule page](/schedule/) for weekly topics, readings, and assignments.
