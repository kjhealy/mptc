---
title: "Example 07: Reading and wrangling data"
engine: knitr
---

```{r}
#| echo: false

knitr::opts_chunk$set(engine.opts = list(zsh = "-l"))

library(tidyverse)
library(here)
library(socviz)

## These packages aren't necessary to reproduce the analysis here
library(showtext)
showtext_auto()

# Custom fonts and stuff; just don't eval it.
library(systemfonts)
clear_registry()

register_variant(
  name = "Myriad Pro SemiCondensed",
  family = "Myriad Pro",
  width = "semicondensed",
  weight = c("normal", "semibold"),
)

library(myriad)
import_myriad_semi()
import_myriad_condensed()
theme_set(theme_myriad_semi())

```


# FARS Example

We start with data from the [Fatality Analysis Reporting System](https://www.nhtsa.gov/research-data/fatality-analysis-reporting-system-fars), which is how the NTSA tracks information about road accidents. Our data file shows counts of pedestrians killed in road accidents on each day of the month in the United States from 2009 to 2018.

```{r}
fars_raw <- read_csv(here("files", "examples", "fars0-17daily.csv"))

fars_raw |> 
  print(n=35)

```

It's not tidy. It's in wide format and the months aren't filled in down the columns. We also have a `Total` value in the day column.


```{r}
fars <- fars_raw |> 
  # Remove 'Total' rows
  filter(day %nin% "Total") |> 
  # Remove any lines that are all NAs
  filter(!if_all(everything(), \(x) is.na(x))) |> 
  # Fill in the month values downwards
  fill(month) |> 
  # Lengthen 
  pivot_longer(cols = `2009`:`2018`, names_to = "year",
               values_to = "n")  
  

fars
    
```

We're going to make a graph of average patterns by month and day over all available years. So first we aggregate the data by month and day and take the average across years. 

```{r}
dates <- unique(paste(fars$month, fars$day))

dates[1:10]

# Shortcut use of `.by` here replaces group_by() and returns ungrouped tibble
fars_daily_means <- fars |> 
    summarize(mean_n = mean(n, na.rm = TRUE), 
            .by = c(month, day)) 


fars_daily_means


 

```

For those purposes of what we're going to draw, it will make more sense to treat years and months as categorical variables, i.e. as factors, rather than true dates. (This is because we have already summarized by month and day, so we no longer have year-level information in the data.)

```{r}
fars_daily_means <- fars_daily_means |> 
  mutate(
    # Ordered categorical var of months
    month_fac = factor(month,
                       levels = unique(fars$month),
                       ordered = TRUE),
    # Convert from character to integer
    day = as.integer(day),
    # Ordered factor of month-days
    day_fac = factor(paste(month, day),
                     levels = dates,
                     ordered = TRUE),
    # Dummy variable: is it Halloween today?
    flag = ifelse(month == "October" & day == 31, TRUE, FALSE), 
    # Shortcut .by again
    .by = c(month, day)) |> 
  # Order for convenience
  arrange(day_fac) 

fars_daily_means

```

Now we can draw a plot. This one is generated from the code here but there's a theme setting that's not shown that makes the fonts a bit nicer.

```{r}
#| fig-height: 18
#| fig-width: 6

fars_daily_means |> 
  ggplot( mapping = aes(x = day, y = mean_n, fill = flag)) +
    geom_col() +
    scale_fill_manual(values = c("gray30", "darkorange2")) +
    scale_x_continuous(breaks = c(1, 10, 20, 30)) + 
    guides(fill = "none") + 
    facet_wrap(~ month_fac, ncol = 1) +
    labs(x = "Day of the Month",
         y = "Mean Number of Child Pedestrians Killed",
         title = "Pedestrians aged 0-17 years involved\nin Fatal Motor Vehicle Crashes",
         subtitle = "Daily Average, 2009-2018",
         caption = "Kieran Healy @kjhealy / Source: NHTSA Fatality Analysis Reporting System")

```


