---
title: "Example 09: Functions and Iteration"
engine: knitr
---

```{r}
#| echo: false

knitr::opts_chunk$set(engine.opts = list(zsh = "-l"))
library(tidyverse)
library(here)
library(socviz)

## ---
## This code is not necessary to reproduce the example
library(myriad)
import_myriad_semi()
import_myriad_condensed()
theme_set(theme_myriad_semi())
## ---

```

```{r}
library(broom)
```


## Functions

```{r}
my_adder <- function(x, add = 1) {
  x + add
}

my_adder(10)

my_adder(1:10)

# This won't work
# my_adder("a")
```

Guard clauses and error handling:

```{r}
my_adder <- function(x, add = 1) {
  if(!is.numeric(x)) {
    return("Argument `x` must be numeric.")
  }

  x + add
}

my_adder("a")


my_adder <- function(x, add = 1) {
  if(!is.numeric(x)) {
    return("Argument `x` must be numeric.")
  }

  if(!is.numeric(add)) {
    return("Argument `add` must be numeric.")
  }

  x + add
}


```

Here I use `return()` in the guard clauses in order to make this example work as part of the pipeline that creates the site. But really I should use `stop()`.

```{r}
my_adder(1:10, 5)


my_adder(1:10, "c")
```


## Elvis PCA Example

### An iconic image

![](../assets/08-iterate/elvis-nixon.jpeg)


### Long Tall Sally

```{r}
# install.packages("imager")

img <- imager::load.image(here("assets", "08-iterate", "elvis-nixon.jpeg"))
str(img)
dim(img)

## Long
img_df_long <- as.data.frame(img)

head(img_df_long)
```

### Return to Sender


```{r}
img_df <- pivot_wider(img_df_long,
                             names_from = y,
                             values_from = value)

dim(img_df)

img_df[1:5, 1:5]

```


### Don't be Cruel

```{r}
tmp <- img_df |> select(-x)
dim(tmp)
tmp[1:5, 1:5]

# Scaled and centered
tmp_norm <- scale(tmp, center = TRUE, scale = TRUE)
tmp_norm[1:5, 1:5]


# Covariance matrix
cov_mat <- cov(tmp_norm)
dim(cov_mat)
cov_mat[1:5, 1:5]
```

### Wooden Heart

Doing the PCA manually, just to show how it works under the hood.

```{r}
# Decomposition/Factorization into eigenvalues and eigenvectors
cov_eig <- eigen(cov_mat)
names(cov_eig)

# Eigenvalues (variances)
cov_evals <- cov_eig$values
cov_evals[1:5]

# Eigenvectors (principal components)
cov_evecs <- cov_eig$vectors
cov_evecs[1:5, 1:5]

# Rotation matrix -- ie the coordinates of the
# original data points translated into the
# transformed coordinate space prcomp$rotation
tmp_rot <- tmp_norm %*% cov_evecs
dim(tmp_rot)
tmp_rot[1:5, 1:5]

# Should be zero
round(cov(cov_evecs), 2)[1:5,1:5]
```

### Clean up your own Backyard

But of course we don't have to do all this manually. R has a built-in function, `prcomp()`, that does all this for us.

```{r}
img_pca <- img_df |>
  select(-x) |>
  prcomp(scale = TRUE, center = TRUE)

pca_tidy <- tidy(img_pca, matrix = "pcs")

pca_tidy
```

### All Shook Up

```{r}
names(img_pca)

```

What are these named things? `sdev` contains the standard deviations of the principal components. `rotation` is a matrix where the rows correspond to the columns of the original data, and the columns are the principal components. `x` is a matrix containing the value of the rotated data multiplied by the `rotation` matrix. Finally, `center` and `scale` are vectors showing the centering and scaling for each observation.

Now, to get from this information back to the original data matrix, we need to multiply `x` by the transpose of the `rotation` matrix, and then revert the centering and scaling steps. If we multiply by the transpose of the _full_ rotation matrix (and then un-center and un-scale), we'll recover the original data matrix exactly. (This is what it means to be able to decompose/factorize the original matrix into these different pieces. Together the pieces can be used to reconstitute the original matrix.)

But we can also choose to use just the first few principal components, instead, as we make our way back to something that is the same shape as the original matrix of pixel values. There are 633 components in all (corresponding to the number of rows in the original data matrix), but the scree plot suggests that most of the data is "explained" by a much smaller number of components than that. And so, we can choose to use just the first 2, or 5, or 10, or 20, or 50 components to get back to an approximation of the original data matrix. This is a lossy reconstruction of the original data.


### I Gotta Know

Here's a function that takes a PCA object created by `prcomp()` and returns an approximation of the original data, calculated by some number (`n_comp`) of principal components. It returns its results in long format, in a way that mirrors what the Imager library wants. This will make plotting easier in a minute.


```{r}
reverse_pca <- function(n_comp = 20, pca_object = img_pca){
  ## The pca_object is an object created by base R's prcomp() function.

  ## Multiply the matrix of rotated data by the transpose of the matrix
  ## of eigenvalues (i.e. the component loadings) to get back to a
  ## matrix of original data values
  recon <- pca_object$x[, 1:n_comp] %*% t(pca_object$rotation[, 1:n_comp])

  ## Reverse any scaling and centering that was done by prcomp()

  if(all(pca_object$scale != FALSE)){
    ## Rescale by the reciprocal of the scaling factor, i.e. back to
    ## original range.
    recon <- scale(recon, center = FALSE, scale = 1/pca_object$scale)
  }
  if(all(pca_object$center != FALSE)){
    ## Remove any mean centering by adding the subtracted mean back in
    recon <- scale(recon, scale = FALSE, center = -1 * pca_object$center)
  }

  ## Make it a data frame that we can easily pivot to long format
  ## (because that's the format that the excellent imager library wants
  ## when drawing image plots with ggplot)
  recon_df <- data.frame(cbind(1:nrow(recon), recon))
  colnames(recon_df) <- c("x", 1:(ncol(recon_df)-1))

  ## Return the data to long form
  recon_df_long <- recon_df |>
    tidyr::pivot_longer(cols = -x,
                        names_to = "y",
                        values_to = "value") |>
    mutate(y = as.numeric(y)) |>
    arrange(y) |>
    as.data.frame()

  tibble::as_tibble(recon_df_long)
}
```


## It's Now or Never

```{r}
## The sequence of PCA components we want
n_pcs <- c(2:5, 10, 20, 50, 100)
names(n_pcs) <- paste("First", n_pcs, "Components", sep = "_")

## Map reverse_pca()
recovered_imgs <- map(n_pcs, reverse_pca) |>
  list_rbind(names_to = "pcs") |>
  mutate(pcs = str_replace_all(pcs, "_", " "),
         pcs = factor(pcs, levels = unique(pcs), ordered = TRUE))

recovered_imgs
```

## Jailhouse Rock

```{r}
#| fig-width: 9
#| fig-height: 18

ggplot(data = recovered_imgs,
            mapping = aes(x = x, y = y, fill = value)) +
  geom_raster() +
  scale_y_reverse() +
  scale_fill_gradient(low = "black", high = "white") +
  facet_wrap(~ pcs, ncol = 2) +
  guides(fill = "none") +
  labs(title = "Recovering the content of an 800x600 pixel image\nfrom a Principal Components Analysis of its pixels") +
  theme(strip.text = element_text(face = "bold", size = rel(1.2)),
        plot.title = element_text(size = rel(1.5)))
```
